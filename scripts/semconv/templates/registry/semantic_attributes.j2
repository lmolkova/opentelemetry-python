# Copyright The OpenTelemetry Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

{%- set file_name = ctx.output + (ctx.id | kebab_case | replace('-', '_')) ~ "_attributes.py" -%}
{{- template.set_file_name(file_name) -}}
{%- import 'common.j2' as c %}

{% set attributes = ctx.attributes | sort(attribute="name") | list %}
{% set enum_attributes = attributes | selectattr("type", "mapping") | list %}
{% if enum_attributes | count > 0 %}from enum import Enum{% endif %}

{%- macro attribute_name(attribute) -%}
{{c.to_const_name(attribute.name)}}{%- if "template" in attribute.type -%}_TEMPLATE{%- endif -%}
{%- endmacro -%}

{%- macro stable_class_ref(const_name, separator) -%}
{{ctx.stable_package_name}}.{{ctx.id}}_attributes{{separator}}{{const_name}}
{%- endmacro %}

{%- macro write_docstring(name, brief, note, deprecated, stability, prefix) -%}
    {%- if c.str_or_empty(deprecated)|length -%}
{{prefix}}Deprecated: {{deprecated | comment_with_prefix(prefix)}}
    {%- elif ctx.filter == "any" and stability == "stable" -%}
{{prefix}}Deprecated in favor of stable :py:const:`{{stable_class_ref(name, '.')}}`.
    {%- elif c.str_or_empty(brief)|length -%}
{{brief | comment_with_prefix(prefix)}}
        {%- if c.str_or_empty(note)|length  %}
{{prefix}}Note: {{note | comment_with_prefix(prefix)}}
        {%- endif -%}
    {%- endif -%}
{%- endmacro -%}

{% for attribute in attributes %}
{% set attr_name = attribute_name(attribute) %}
{%- set doc_string=write_docstring(attr_name, attribute.brief, attribute.note, attribute.deprecated, attribute.stability, "")-%}
{{attr_name}} = "{{attribute.name}}"
{%- if doc_string %}
"""
{{doc_string}}
"""
{%- endif %}
{% endfor %}

{% for attribute in enum_attributes %}{%- set class_name = c.to_class_name(attribute.name) ~ "Values" -%}
class {{class_name}}(Enum):
    {%- for member in attribute.type.members %}
    {% set member_name = c.to_const_name(member.id) %}
    {%- set doc_string=write_docstring(class_name + '.' + member_name, member.brief, "", member.deprecated, member.stability, "")-%}
    {{member_name}} = "{{ member.value }}"
    {% if doc_string %}"""{{doc_string}}"""{% endif %}
    {% endfor %}
{% endfor %}