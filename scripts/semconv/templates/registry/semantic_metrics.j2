# Copyright The OpenTelemetry Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

{% set file_name = ctx.output + ctx.id | kebab_case | replace('-', '_') ~ "_metrics.py" -%}
{{- template.set_file_name(file_name) -}}

{% import 'common.j2' as c -%}

{%- macro stable_class_ref(const_name, separator) -%}
{{ctx.stable_package_name}}.{{ctx.id}}_metrics{{separator}}{{const_name}}
{%- endmacro %}

{%- macro write_docstring(metric, prefix) -%}
    {%- if c.str_or_empty(metric.deprecated)|length %}
{{prefix}}Deprecated: {{c.to_docstring(metric.deprecated, prefix)}}.
    {%- elif ctx.filter == "any" and metric.stability == "stable" %}
{{prefix}}Deprecated in favor of stable :py:const:`{{stable_class_ref(metric.metric_name, '.')}}`.
    {%- elif c.str_or_empty(metric.brief)|length %}
{{prefix}}{{c.to_docstring(metric.brief, prefix)}}.
{{prefix}}Instrument: {{ metric.instrument }}
{{prefix}}Unit: {{ metric.unit }}
        {%- if c.str_or_empty(metric.note)|length  %}
{{prefix}}Note: {{c.to_docstring(metric.note, prefix)}}.
        {%- endif -%}
    {%- endif -%}
{%- endmacro -%}

{%- macro import_instrument_classes(metrics) -%}
  {% if ctx.filter == "any" %}
from opentelemetry.metrics import Meter

    {%- if ctx.metrics | selectattr("instrument", "equalto", "gauge") | list | count > 0 %}
from typing import Callable, Sequence
    {%- endif %}

    {%- set instruments = ["counter", "histogram", "gauge", "updowncounter"]-%}
    {%- for i in instruments -%}
        {%- if ctx.metrics | selectattr("instrument", "equalto", i) | list | count > 0 %}
from opentelemetry.metrics import {{i | map_text("py_instrument_to_type")}}
        {%- endif -%}
    {%- endfor-%}
  {%- endif -%}
{%- endmacro-%}

{{ import_instrument_classes(filtered_metrics) }}

{%- for metric in ctx.metrics %}
{{c.to_const_name(metric.metric_name)}} = "{{metric.metric_name}}"
{%- set doc_string=write_docstring(metric, "")-%}{%- if doc_string %}
"""{{doc_string}}
"""{% endif %}

{% if ctx.filter == "any" %}
{% set metric_name = metric.metric_name | replace(".", "_") %}
{%- if metric.instrument == "gauge" %}
def create_{{ metric_name }}(meter: Meter, callback: Sequence[Callable]) -> {{metric.instrument | map_text("py_instrument_to_type")}}:
{%- else %}
def create_{{ metric_name }}(meter: Meter) -> {{metric.instrument | map_text("py_instrument_to_type")}}:
{%- endif %}
    {% if metric.brief != "" %}"""{{ metric.brief | replace("\\", "\\\\")}}"""{% endif %}
    return meter.create_{{ metric.instrument | map_text("py_instrument_to_factory")}}(
        name="{{ metric.metric_name }}",
        {%- if metric.instrument == "gauge" %}
        callback=callback,
        {%- endif %}
        description="{{ metric.brief }}",
        unit="{{ metric.unit }}",
    )
    {%- endif -%}

{% endfor %}
