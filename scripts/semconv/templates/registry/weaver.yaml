params:
  excluded: ["ios", "aspnetcore", "signalr", "android", "dotnet", "jvm", "kestrel"]
  stable_package_name: opentelemetry.semconv


templates:
  - pattern: semantic_attributes.j2
    filter: >
      .groups
      | map(select(.type == "attribute_group"))
      | map(select(.id | startswith("registry")))
      | map({ id: .id, group_id: .id | split(".") | .[1], attributes: .attributes})
      | group_by(.group_id)
      | map({ id: .[0].group_id, attributes: [.[].attributes[]] |  map(select(if $filter == "any" then true else .stability == $filter end)) | sort_by(.id)})
      | map(select( .id as $id | any( $excluded[]; . == $id) | not ))
      | map(select(.attributes | length > 0))
      | map({
        id: .id,
        attributes: .attributes
          | map(. + {const_name: .name | split(".")|join("_")})
          | map(if has("deprecated") then . else . + {"deprecated": null} end)
          | group_by(.const_name)
          | map({const_name: .[0].const_name, names: [.[]] | sort_by(.deprecated) })
          | map(.names[0]),
        output: $output + "attributes/",
        stable_package_name: $stable_package_name + ".attributes",
        filter: $filter
      })
    application_mode: each
  - pattern: semantic_metrics.j2
    filter: >
      .groups
      | map(select(.type == "metric"))
      | map(select(if $filter == "any" then true else .stability == $filter end))
      | map({ id: .id, group_id: .id | split(".") | .[1], brief, unit, stability, deprecated, instrument, metric_name})
      | group_by(.group_id)
      | map({
        id: .[0].group_id,
        metrics: .,
        output: $output + "metrics/",
        stable_package_name: $stable_package_name + ".metrics",
        filter: $filter
      })
      | map(select( .id as $id | any( $excluded[]; . == $id) | not ))
    application_mode: each
text_maps:
  py_instrument_to_factory:
    counter: counter
    histogram: histogram
    updowncounter: up_down_counter
    gauge: observable_gauge
  py_instrument_to_type:
    counter: Counter
    histogram: Histogram
    updowncounter: UpDownCounter
    gauge: ObservableGauge

