{% import 'common.j2' as common %}

{%- macro stable_class_ref(const_name, separator) -%}
{{stable_package}}.{{root_namespace}}_attributes{{separator}}{{const_name}}
{%- endmacro %}

{%- macro attribute_name(attribute) -%}
    {%- if attribute | is_template -%}
    {{attribute.fqn | to_const_name}}_TEMPLATE
    {%- else -%}
    {{attribute.fqn | to_const_name}}
    {%- endif -%}
{%- endmacro -%}

{%- macro attribute_brief(attribute) -%}
    {%- if attribute | is_deprecated -%}
Deprecated: {{ common.to_docstring(attribute.deprecated) }}.
    {%- elif attribute | is_stable and filter == "any" %}
Deprecated in favor of stable :py:const:`{{stable_class_ref(attribute_name(attribute), '.')}}`.
    {%- else -%}
    {{ common.to_docstring(attribute.brief) }}.
        {%- if attribute.note %}
Note: {{ common.to_docstring(attribute.note | indent)}}.
        {%- endif -%}
    {%- endif -%}
{%- endmacro -%}

{%- macro import_deprecated(attrs) -%}
    {%- if attrs | select("is_deprecated") | list | count > 0 %}
from deprecated import deprecated
    {%- endif %}

    {%- if filter == "any" and attrs | select("is_stable") | list | count > 0 %}
from deprecated import deprecated
    {%- endif %}
{%- endmacro-%}

{%- if root_namespace not in excluded_namespaces -%}
{%- if filter != 'any' -%}
{%- set filtered_attributes = attributes_and_templates | select(filter) | list -%}
{%- else -%}
{%- set filtered_attributes = attributes_and_templates | list %}
{%- endif -%}
{%- if filtered_attributes | count > 0 -%}

{{ common.file_header()}}

{%- if filter != 'any' -%}
{%- set filtered_enum_attributes = enum_attributes | select(filter) | list %}
{%- else -%}
{%- set filtered_enum_attributes = enum_attributes | list %}
{%- endif -%}

{{import_deprecated(filtered_enum_attributes)}}

{% if filtered_enum_attributes | count > 0 %}

from enum import Enum

{% else %}

{% endif %}
{% for attribute in filtered_attributes -%}
{{attribute_name(attribute)}} = "{{attribute.fqn}}"
"""
{{attribute_brief(attribute)}}
"""

{% endfor %}
{%- for attribute in filtered_enum_attributes -%}
{%- set class_name = attribute.fqn | to_camelcase(True) ~ "Values" -%}
    {%- if attribute | is_deprecated %}
@deprecated(reason="The attribute {{attribute.fqn}} is deprecated - {{ common.to_docstring(attribute.deprecated) }}")
    {%- elif attribute | is_stable and filter == "any" %}
@deprecated(reason="Deprecated in favor of stable :py:const:`{{stable_class_ref(class_name, '.')}}`.")
    {%- endif %}
class {{class_name}}(Enum):
    {%- for member in attribute.attr_type.members %}
    {{ member.member_id | to_const_name }} = {{ attribute | print_member_value(member) }}
    """{{ common.to_docstring(member.brief) }}."""
    {%- endfor %}
{%- endfor -%}
{%- endif -%}
{%- endif -%}